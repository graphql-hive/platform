// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`FailureUserInput - { command: 'app:create' } > OUTPUT FORMAT: JSON 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "failure",
  "reference": null,
  "suggestions": [],
  "data": {
    "type": "FailureUserInput",
    "message": "Missing 1 required arg:\\nfile  Path to the persisted operations mapping.\\nSee more help with --help",
    "problem": "positionalArgumentMissing"
  }
}
`;

exports[`FailureUserInput - { command: 'app:create' } > OUTPUT FORMAT: TEXT 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
2
stderr--------------------------------------------:
 ›   Error: Missing 1 required arg:
 ›   file  Path to the persisted operations mapping.
 ›   See more help with --help

USAGE
  $ hive app:create FILE --name <value> --version <value> [--json]
    [--debug] [--registry.endpoint <value>] [--registry.accessToken <value>]

ARGUMENTS
  FILE  Path to the persisted operations mapping.

FLAGS
  --debug                         Whether debug output for HTTP calls and
                                  similar should be enabled.
  --name=<value>                  (required) app name
  --registry.accessToken=<value>  registry access token
  --registry.endpoint=<value>     registry endpoint
  --version=<value>               (required) app version

GLOBAL FLAGS
  --json  Format output as json.

stdout--------------------------------------------:
__NONE__
`;

exports[`FailureUserInput - { command: 'app:publish' } > OUTPUT FORMAT: JSON 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "failure",
  "reference": null,
  "suggestions": [],
  "data": {
    "type": "FailureUserInput",
    "message": "The following errors occurred:\\n  Missing required flag name\\n  Missing required flag version\\nSee more help with --help",
    "problem": "namedArgumentInvalid"
  }
}
`;

exports[`FailureUserInput - { command: 'app:publish' } > OUTPUT FORMAT: TEXT 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
2
stderr--------------------------------------------:
 ›   Error: The following errors occurred:
 ›     Missing required flag name
 ›     Missing required flag version
 ›   See more help with --help
stdout--------------------------------------------:
__NONE__
`;

exports[`FailureUserInput - { command: 'schema:check' } > OUTPUT FORMAT: JSON 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "failure",
  "reference": null,
  "suggestions": [],
  "data": {
    "type": "FailureUserInput",
    "message": "Missing 1 required arg:\\nfile  Path to the schema file(s)\\n\\nNote: --require allows multiple values. Because of this you need to provide all arguments before providing that flag.\\nAlternatively, you can use \\"--\\" to signify the end of the flags and the beginning of arguments.\\nSee more help with --help",
    "problem": "positionalArgumentMissing"
  }
}
`;

exports[`FailureUserInput - { command: 'schema:check' } > OUTPUT FORMAT: TEXT 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
2
stderr--------------------------------------------:
 ›   Error: Missing 1 required arg:
 ›   file  Path to the schema file(s)
 ›
 ›   Note: --require allows multiple values. Because of this you need to 
 ›   provide all arguments before providing that flag.
 ›   Alternatively, you can use "--" to signify the end of the flags and the 
 ›   beginning of arguments.
 ›   See more help with --help

USAGE
  $ hive schema:check FILE [--json] [--debug] [--service <value>]
    [--registry.endpoint <value>] [--registry <value>] [--registry.accessToken
    <value>] [--token <value>] [--forceSafe] [--github] [--require <value>]
    [--author <value>] [--commit <value>] [--contextId <value>]

ARGUMENTS
  FILE  Path to the schema file(s)

FLAGS
  --author=<value>                Author of the change
  --commit=<value>                Associated commit sha
  --contextId=<value>             Context ID for grouping the schema check.
  --debug                         Whether debug output for HTTP calls and
                                  similar should be enabled.
  --forceSafe                     mark the check as safe, breaking changes are
                                  expected
  --github                        Connect with GitHub Application
  --registry=<value>              registry address
  --registry.accessToken=<value>  registry access token
  --registry.endpoint=<value>     registry endpoint
  --require=<value>...            [default: ] Loads specific require.extensions
                                  before running the codegen and reading the
                                  configuration
  --service=<value>               service name (only for distributed schemas)
  --token=<value>                 api token

GLOBAL FLAGS
  --json  Format output as json.

stdout--------------------------------------------:
__NONE__
`;

exports[`FailureUserInput - { command: 'schema:delete' } > OUTPUT FORMAT: JSON 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "failure",
  "reference": null,
  "suggestions": [],
  "data": {
    "type": "FailureUserInput",
    "message": "Missing 1 required arg:\\nservice  name of the service\\nSee more help with --help",
    "problem": "positionalArgumentMissing"
  }
}
`;

exports[`FailureUserInput - { command: 'schema:delete' } > OUTPUT FORMAT: TEXT 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
2
stderr--------------------------------------------:
 ›   Error: Missing 1 required arg:
 ›   service  name of the service
 ›   See more help with --help

USAGE
  $ hive schema:delete SERVICE [--json] [--debug] [--registry.endpoint
    <value>] [--registry <value>] [--registry.accessToken <value>] [--token
    <value>] [--dryRun] [--confirm]

ARGUMENTS
  SERVICE  name of the service

FLAGS
  --confirm                       Confirm deletion of the service
  --debug                         Whether debug output for HTTP calls and
                                  similar should be enabled.
  --dryRun                        Does not delete the service, only reports what
                                  it would have done.
  --registry=<value>              registry address
  --registry.accessToken=<value>  registry access token
  --registry.endpoint=<value>     registry endpoint
  --token=<value>                 api token

GLOBAL FLAGS
  --json  Format output as json.

stdout--------------------------------------------:
__NONE__
`;

exports[`FailureUserInput - { command: 'schema:fetch' } > OUTPUT FORMAT: JSON 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "failure",
  "reference": null,
  "suggestions": [],
  "data": {
    "type": "FailureUserInput",
    "message": "Missing 1 required arg:\\nactionId  action id (e.g. commit sha)\\nSee more help with --help",
    "problem": "positionalArgumentMissing"
  }
}
`;

exports[`FailureUserInput - { command: 'schema:fetch' } > OUTPUT FORMAT: TEXT 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
2
stderr--------------------------------------------:
 ›   Error: Missing 1 required arg:
 ›   actionId  action id (e.g. commit sha)
 ›   See more help with --help

USAGE
  $ hive schema:fetch ACTIONID [--json] [--debug] [--registry <value>]
    [--token <value>] [--registry.endpoint <value>] [--registry.accessToken
    <value>] [--type <value>] [--write <value>] [--outputFile <value>]

ARGUMENTS
  ACTIONID  action id (e.g. commit sha)

FLAGS
  --debug                         Whether debug output for HTTP calls and
                                  similar should be enabled.
  --outputFile=<value>            whether to write to a file instead of stdout
  --registry=<value>              registry address
  --registry.accessToken=<value>  registry access token
  --registry.endpoint=<value>     registry endpoint
  --token=<value>                 api token
  --type=<value>                  Type to fetch (possible types: sdl,
                                  supergraph)
  --write=<value>                 Write to a file (possible extensions:
                                  .graphql, .gql, .gqls, .graphqls)

GLOBAL FLAGS
  --json  Format output as json.

stdout--------------------------------------------:
__NONE__
`;

exports[`FailureUserInput - { command: 'schema:publish' } > OUTPUT FORMAT: JSON 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "failure",
  "reference": null,
  "suggestions": [],
  "data": {
    "type": "FailureUserInput",
    "message": "Missing 1 required arg:\\nfile  Path to the schema file(s)\\n\\nNote: --require allows multiple values. Because of this you need to provide all arguments before providing that flag.\\nAlternatively, you can use \\"--\\" to signify the end of the flags and the beginning of arguments.\\nSee more help with --help",
    "problem": "positionalArgumentMissing"
  }
}
`;

exports[`FailureUserInput - { command: 'schema:publish' } > OUTPUT FORMAT: TEXT 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
2
stderr--------------------------------------------:
 ›   Error: Missing 1 required arg:
 ›   file  Path to the schema file(s)
 ›
 ›   Note: --require allows multiple values. Because of this you need to 
 ›   provide all arguments before providing that flag.
 ›   Alternatively, you can use "--" to signify the end of the flags and the 
 ›   beginning of arguments.
 ›   See more help with --help

USAGE
  $ hive schema:publish FILE [--json] [--debug] [--service <value>] [--url
    <value>] [--metadata <value>] [--registry.endpoint <value>] [--registry
    <value>] [--registry.accessToken <value>] [--token <value>] [--author
    <value>] [--commit <value>] [--github] [--force]
    [--experimental_acceptBreakingChanges] [--require <value>]

ARGUMENTS
  FILE  Path to the schema file(s)

FLAGS
  --author=<value>                      author of the change
  --commit=<value>                      associated commit sha
  --debug                               Whether debug output for HTTP calls and
                                        similar should be enabled.
  --experimental_acceptBreakingChanges  (experimental) accept breaking changes
                                        and mark schema as valid (only if
                                        composable)
  --force                               force publish even on breaking changes
  --github                              Connect with GitHub Application
  --metadata=<value>                    additional metadata to attach to the
                                        GraphQL schema. This can be a string
                                        with a valid JSON, or a path to a file
                                        containing a valid JSON
  --registry=<value>                    registry address
  --registry.accessToken=<value>        registry access token
  --registry.endpoint=<value>           registry endpoint
  --require=<value>...                  [default: ] Loads specific
                                        require.extensions before running the
                                        codegen and reading the configuration
  --service=<value>                     service name (only for distributed
                                        schemas)
  --token=<value>                       api token
  --url=<value>                         service url (only for distributed
                                        schemas)

GLOBAL FLAGS
  --json  Format output as json.

stdout--------------------------------------------:
__NONE__
`;

exports[`FailureUserInput - { command: 'whoami' } > OUTPUT FORMAT: JSON 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
1
stderr--------------------------------------------:
__NONE__
stdout--------------------------------------------:
{
  "type": "failure",
  "reference": null,
  "suggestions": [],
  "data": {
    "type": "FailureUserInput",
    "problem": "namedArgumentMissing",
    "parameter": "registry.accessToken"
  }
}
`;

exports[`FailureUserInput - { command: 'whoami' } > OUTPUT FORMAT: TEXT 1`] = `
:::::::::::::::: CLI FAILURE OUTPUT :::::::::::::::
exitCode------------------------------------------:
2
stderr--------------------------------------------:
 ›   Error: Missing "registry.accessToken"
stdout--------------------------------------------:
__NONE__
`;
